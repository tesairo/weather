{"version":3,"sources":["logo.svg","weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","props","state","temperature","country","city","latitude","longitude","load_error","navigator","geolocation","getCurrentPosition","position","coords","fetch","api","then","response","json","data","console","log","setState","main","temp","name","sys","coord","lat","lon","catch","err","this","React","Component","App","className","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ac5e2d09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nclass Weather extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\ttemperature: \"...\",\r\n\t\t\tcountry: \"...\",\r\n\t\t\tcity: \"...\",\r\n\t\t\tlatitude: \"...\",\r\n\t\t\tlongitude: \"...\",\r\n\t\t\tload_error : null , \r\n\t\t}\r\n\r\n\t\t\r\n\t}\r\n\tcomponentDidMount(){\r\n\r\n\t\tif (navigator.geolocation){\r\n\t\t\tnavigator.geolocation.getCurrentPosition(\r\n\t\t\t\t(position) => {\r\n\t\t\t\t\tlet latitude = position.coords.latitude\r\n\t\t\t\t\tlet longitude = position.coords.longitude\r\n\t\t\t\t\tlet api = \"https://api.openweathermap.org/data/2.5/weather\"\r\n\t\t\t\t\tlet apikey = \"3323ab15e490e3289689e2cbe001fb3a\"\r\n\t\t\t\t\tlet url = api +\"?lat=\" + latitude + \"&lon=\" + longitude +\"&appid=\" + apikey + \"&units=imperial\"\r\n\t\t\t\t\tfetch(url).then(response => response.json()).then(data => \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.log(data)\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\ttemperature: data.main.temp,\r\n\t\t\t\t\t\t\tcity: data.name,\r\n\t\t\t\t\t\t\tcountry: data.sys.country,\r\n\t\t\t\t\t\t\tlatitude: data.coord.lat,\r\n\t\t\t\t\t\t\tlongitude: data.coord.lon,\r\n\t\t\t\t\t\t\tload_error: \"loaded\"\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\t).catch(err => {console.log(\"error occured\",err)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\r\n\t\t\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.load_error === null){\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h5>Loading...</h5>\r\n\t\t\t\t\t\t\t<p>check location premission & internet if loading takes longer</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\telse {\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<h3>temprature:({this.state.temperature + \"\\u00B0\"} F)</h3>\r\n\t\t\t\t<h3>city: {this.state.city} ({this.state.country})  </h3>\r\n\t\t\t\t<p>coordinates:({this.state.latitude + \"\\u00B0\"},{this.state.longitude + \"\\u00B0\"})</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t\t}\r\n\t}\r\n}\r\nexport default Weather","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Weather from './weather'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <Weather />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}